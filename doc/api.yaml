openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /user:
    get:
      operationId: UserController_getAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
      tags:
        - Users
    post:
      operationId: UserController_create
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input
      tags:
        - Users
  /user/{id}:
    get:
      operationId: UserController_getById
      summary: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid UUID
        '404':
          description: User not found
      tags:
        - Users
    put:
      operationId: UserController_update
      summary: Update user password
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: Invalid input
        '403':
          description: Old password is wrong
        '404':
          description: User not found
      tags:
        - Users
    delete:
      operationId: UserController_remove
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          description: User UUID
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid UUID
        '404':
          description: User not found
      tags:
        - Users
  /artist:
    get:
      operationId: ArtistController_getAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: List of artists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponseDto'
    post:
      operationId: ArtistController_create
      summary: Create a new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid input.
  /artist/{id}:
    get:
      operationId: ArtistController_getById
      summary: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '200':
          description: Artist found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
    put:
      operationId: ArtistController_update
      summary: Update artist info
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponseDto'
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist UUID
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
info:
  title: Home Library Service API
  description: API documentation for Home Library Service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 11111111-ab12-ab32-1234-123123123123
          description: UUID
        login:
          type: string
          example: login
          description: Login
        version:
          type: number
          example: 1
          description: Version
        createdAt:
          type: number
          example: 1111111111
          description: Creation timestamp
        updatedAt:
          type: number
          example: 9999999999
          description: Update timestamp
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: login
          description: Login
        password:
          type: string
          example: Password
          description: Password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: OldPassword
          description: Current password
        newPassword:
          type: string
          example: NewPassword
          description: New password
      required:
        - oldPassword
        - newPassword
    ArtistResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 11111111-ab12-ab32-1234-123123123123
          description: UUID of the artist
        name:
          type: string
          example: Ivan Sigaev
          description: Name of the artist
        grammy:
          type: boolean
          example: true
          description: Has won a Grammy
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties: {}
